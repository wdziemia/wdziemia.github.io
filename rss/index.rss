<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="//purl.org/dc/elements/1.1/" xmlns:content="//purl.org/rss/1.0/modules/content/" xmlns:atom="//www.w3.org/2005/Atom" version="2.0" xmlns:media="//search.yahoo.com/mrss/"><channel><title><![CDATA[Wojciech Dziemianczyk]]></title><description><![CDATA[Wojciech Dziemianczyk]]></description><link>//wdziemia.github.io/</link><image><url>//wdziemia.github.io/favicon.png</url><title>Wojciech Dziemianczyk</title><link>//wdziemia.github.io/</link></image><generator>Ghost 3.40</generator><lastBuildDate>Wed, 23 Dec 2020 19:13:12 GMT</lastBuildDate><atom:link href="//wdziemia.github.io/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[Avoid repetitive dependency declarations with Gradle Kotlin DSL]]></title><description><![CDATA[
Improve how you define dependencies throughout your Android project.
]]></description><link>//wdziemia.github.io/avoid-repetitive-dependency-declarations-with-gradle-kotlin-dsl/</link><guid isPermaLink="false">5fe374eb4e202b72753b096c</guid><dc:creator><![CDATA[Walter Dziemianczyk]]></dc:creator><pubDate>Fri, 20 Sep 2019 00:00:00 GMT</pubDate><media:content url="//wdziemia.github.io/content/images/downloaded_images/Avoid-repetitive-dependency-declarations-with-Gradle-Kotlin-DSL/1-oNG3VuUDPK4NwoASVw3j6g.png" medium="image"/><content:encoded><![CDATA[<h3 id="improve-how-you-define-dependencies-throughout-your-android-project-">Improve how you define dependencies throughout your Android project.</h3><img src="//wdziemia.github.io/content/images/downloaded_images/Avoid-repetitive-dependency-declarations-with-Gradle-Kotlin-DSL/1-oNG3VuUDPK4NwoASVw3j6g.png" alt="Avoid repetitive dependency declarations with Gradle Kotlin DSL"><p>Gradle recently introduced a <a href="https://docs.gradle.org/current/userguide/kotlin_dsl.html">Kotlin DSL</a> to replace the ever-so-popular Groovy DSL which (almost) no one loves. The main benefit when working with build files in the new system, believe it or not, is code completion. Backed by a powerful language like Kotlin, it’s an absolute pleasure dealing with build files now. So, how can Kotlin DSL make our lives easier? Well, let’s start with where we were at before.</p><h2 id="the-old-way">The Old Way</h2><p>With the Groovy DSL, we’d typically have our dependencies littered around the app. If we’re only using a single module in our project, no big deal. Any update to a single dependency is applied to all of our code base.</p><pre><code class="language-groovy">androidTestImplementation 'androidx.test:runner:1.2.0'
androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'</code></pre><p>Cool, what if we have a multi-module app? Now we have ${modules.size()} the dependencies to have to keep track of! Should we just stick with a search and replace? <strong>No! … </strong>Regex?<strong> No! … </strong>Magic? .. 🤔.. <strong>No!</strong></p><p>In Gradle, we’re able to create predefined scripts which we can reuse(yay!). This means that we’re able to define all our dependencies in a single location. Let’s say we reuse the gradle/ directory within our project and create a dependencies.gradle file within there. We can define dependency versions in one object, and libraries in another, with some nesting for organization.</p><pre><code class="language-groovy">def versions = [  
  runner          : '1.1.0',  
  espresso        : '2.0.0-beta2'  
  supportV4       : '28.0.0'
]

ext.libraries = [  
  deviceTests : [    
    espresso      : "androidx...:${versions.espresso}",      
    runner        : "androidx...:${versions.runner}"  
  ],  
  supportV4       : "com.android....:${versions.supportV4}"
]</code></pre><p>Now, we just need to make this file “visible” within each module’s build.gradle. We can do that by using apply from!</p><pre><code class="language-groovy">apply from: ‘../gradle/dependencies.gradle’</code></pre><p>This now makes a life a smidge easier in that we now have a single source of truth for all of our dependencies. There’s now only one file to update when it’s time to upgrade all-the-things.</p><pre><code class="language-groovy">...
apply plugin: 'kotlin-kapt'
apply from: ‘../gradle/dependencies.gradle’

android {
  ...
}

dependencies {
  androidTestImplementation libraries.deviceTests.runner
  androidTestImplementation libraries.deviceTests.espresso
  implementation libraries.supportV4
}</code></pre><h2 id="how-can-we-make-this-better">How can we make this better?</h2><p><strong>Code completion</strong>! It’s not something that’s too bad .. until we repeat the same process in every new module and make sure we didn't misspell anything which, if you’re anything like me, you will. Side note, shout out to the person who invented spell-check.</p><p>Second, we may <strong>forget to apply the dependencies file</strong>. Why cant Gradle just know it exists! That is .. unless you’re fancy and have a build.gradle template for some auto-copy-pasta … but still. Let’s try and avoid attempting to build and subsequent wall of red text.</p><p>Third, <strong>defining every dependency</strong> .. line by line by line by line by line. This ends up just being a copy-pasta job from other modules. Not terrible, but not great. Example: forgetting to define kapt for moshi-codegen and finding out the hard way that the code ain’t too hot. Let’s always strive for <em>hot code</em> 🔥.</p><h2 id="cue-gradle-kotlin-dsl-">Cue Gradle Kotlin DSL 🎉</h2><p>Using the Kotlin DSL will help us achieve all these goals. <strong>We</strong> <strong>will</strong> get you to <em>hot code</em> 🔥 status. Read on.</p><h3 id="single-source-of-truth">Single Source of Truth</h3><p>We can achieve a similar Groovy DSL setup with having a shared dependencies file by using the buildSrc/ directory in our project. There are <a href="https://medium.com/mindorks/migrating-gradle-build-scripts-to-kotlin-dsl-89788a4e383a">plenty</a> of <a href="https://proandroiddev.com/migrate-to-gradle-kotlin-dsl-in-4-steps-f3e3b27e1f4d">posts</a> about this <a href="https://guides.gradle.org/migrating-build-logic-from-groovy-to-kotlin/">topic</a>, so I won’t go into the thick of it. The outcome of that process should be the same as <strong>The Old Way, </strong>a single source of truth for all dependencies.</p><p>The other main benefit is that any gradle.kts file defined in buildSrc/ is automatically recognized by all of our converted module build.gradle.kts files. This means that any new module will automatically pick-up what’s defined in that directory .. so no more having to use apply from for the dependencies.gradle.kts file! 🎉Win!</p><h3 id="code-completion">Code Completion</h3><p>If the conversion went well, all of our Gradle files are now in Kotlin giving us the full power of the IDE. It will treat our build.gradle.kts as a regular Kotlin classes, giving us code completion out of the box! 🎉 Second Win!</p><figure class="kg-card kg-image-card"><img src="//wdziemia.github.io/content/images/downloaded_images/Avoid-repetitive-dependency-declarations-with-Gradle-Kotlin-DSL/1-AcUkFK9xqKmbO4LGUs6Hvg.png" class="kg-image" alt="Avoid repetitive dependency declarations with Gradle Kotlin DSL"></figure><h3 id="stop-repeating-yourself"><strong>Stop Repeating Yourself</strong></h3><p>Defining the same set of dependencies per each module is a common occurrence. Let’s say we want to introduce rxJava to our project. We probably also want to include rxAndroid and rxKotlin too.</p><pre><code class="language-kts">implementation(Libraries.Threading.rxJava)
implementation(Libraries.Threading.rxAndroid)
implementation(Libraries.Threading.rxKotlin)</code></pre><p>We know that these three dependencies will probably be defined together 99.995% of the time for each module. Why can’t we just group all these three together and only call on one function to add them? .. Well that is exactly what we will do using Kotlin method extensions.</p><p>Under the Kotlin DSL hood, the implementation function is an extension function on DependencyHandler. That method then calls on DependencyHandler.add(String, Any). That’s the same for testImplementation, androidTestImplementation, api , etc. We can use that same idea within our Dependencies.gradle.kts file.</p><p>So, let’s look at our current setup:</p><pre><code class="language-kts">object Libraries {

  object Threading {

    object Versions {
      ...
    }

    const val rxJava = "io...:rxjava:${Versions.rxJava}"
    const val rxAndroid = "io...:rxjava:${Versions.rxAndroid}"
    const val rxKotlin = "io...:rxjava:${Versions.rxKotlin}"
  }

}</code></pre><p>Within Threading, We can add an extension function on DependencyHandler to only add all Rx dependencies.</p><pre><code class="language-kts">object Libraries {
  
  object Threading {

    object Versions {
      ...
    }

    const val rxJava = "io...:rxjava:${Versions.rxJava}"
    const val rxAndroid = "io...:rxjava:${Versions.rxAndroid}"
    const val rxKotlin = "io...:rxjava:${Versions.rxKotlin}"
    
    DependencyHandler.implementRx() {
      add("implementation", rxJava)
      add("implementation", rxAndroid)
      add("implementation", rxAndroid)
    }
  }
}</code></pre><p>This then allows us to call implementRx() within the dependencies block in our build.gradle.kts.</p><pre><code class="language-kts">import Libraries.Threading.implementRx

dependencies {
  implementRx()
}</code></pre><p>We can even go a step further, and have an extension function which calls on other extension functions we’ve already defined.</p><pre><code class="language-kts">object Threading {
  // ...
  DependencyHandler.implementRx() {
    // ...
  }
  DependencyHandler.implementSomethingElse() {
    // ...
  }
  DependencyHandler.implementThreading() {
    implementRx()
    implementSomethingElse()
  }
}

// - - - - - - - - - - - - - - -

import Libraries.Threading.implementThreading

dependenies {
  implementThreading()
}</code></pre><p>Using this trick brought down a 28 line dependency block to 9 lines for a project I’m working on. <em>&lt;doge&gt;Wow. Win Three. Such Efficient! 🎉&lt;/doge&gt;</em></p><h3 id="upgrading-dependencies">Upgrading Dependencies</h3><p>The process of upgrading dependencies sounds manual and tedious, and thats because it usually is. Having to this means tracking down the latest version through a GitHub README, GitHub Releases, or even browsing through Maven. There is a nifty Gradle plugin which does all that legwork for you so you don’t have to! Go check out <a href="https://github.com/jmfayard/buildSrcVersions">jmfayard/buildSrcVersions</a> for more information!</p><h2 id="the-end">The End</h2><p>With these extension functions and the use of Kotlin, it’s less hassle and simpler to define dependencies. It also helps lessen the learning curve for new engineers learning how to setup their project. Kotlin’s great language features make implementing this straight forward! No need write a Groovy gradle plugin if we have the power of Kotlin powering our build scripts!</p><p>Thanks for reading! Happy coding!

</p>]]></content:encoded></item><item><title><![CDATA[Android Q to the Res-Q!]]></title><description><![CDATA[An intro to RoleManager! And a title with terrible pun for an article that has nothing to do with Resources!
]]></description><link>//wdziemia.github.io/android-q-to-the-res-q-/</link><guid isPermaLink="false">5fe374eb4e202b72753b096d</guid><dc:creator><![CDATA[Walter Dziemianczyk]]></dc:creator><pubDate>Fri, 29 Mar 2019 00:00:00 GMT</pubDate><media:content url="//wdziemia.github.io/content/images/downloaded_images/Android-Q-to-the-Res-Q-/1-96egkHkg2_sBtf10nPxOXQ.jpeg" medium="image"/><content:encoded><![CDATA[<h3 id="an-intro-to-rolemanager-and-a-terrible-pun-that-has-nothing-to-do-with-resources-">An intro to RoleManager! And a terrible pun that has nothing to do with Resources!</h3><img src="//wdziemia.github.io/content/images/downloaded_images/Android-Q-to-the-Res-Q-/1-96egkHkg2_sBtf10nPxOXQ.jpeg" alt="Android Q to the Res-Q!"><p>Android Q Preview was released recently, inviting developers to start testing and supporting new APIs! One of these APIs is <code>RoleManager</code>, and as we can gather from the Q-preview documentation:</p><blockquote>Android Q introduces a standard facility, <em>roles</em>, that allows the OS to grant apps elevated access to system functions based on well-understood use cases. Semantically, each role represents a common use case, such as playing music, viewing photos in a gallery, or sending SMS messages. If an app loses its role, this elevated access is also revoked. (<a href="https://developer.android.com/reference/android/app/role/RoleManager.html">Link</a>)</blockquote><p>In plain english, a role is basically a type of app that executes a specific function (e.g. web browser). The roles exposed in the Q preview are Browser, Dialer, Emergency, Gallery, Home, Music, and SMS. As a developer, you can now request to hold one of these roles for your app, if it falls into one of those buckets.</p><h3 id="why-is-this-api-helpful"><strong>Why is this API helpful?</strong></h3><p>This now lets us proactively query the system to see if our app is the default. If not, it lets us request permission, from the user, to hold that role. We now have more control over checking and responding to these sorts of events. No more silly hacks, no more trying to resolve your package name with the PackageManager, no more searching for options in settings! (🎉🎉🎉)</p><h3 id="what-s-the-catch"><strong>What’s the catch?</strong></h3><p>For the <code>RoleManager</code> to resolve a request properly, your Manifest must specify categories, permissions, or additional intent filters for the role to properly be held. The request will be automatically canceled if you fail to do so. For example, if we have an Internet Browser, we must define the <code>CATEGORY_APP_BROWSER</code> inside the <code>IntentFilter</code> for your Launcher activity. If we do not, and we request a role via <code>RoleManager</code>, that request will be denied without ever prompting the user.</p><h3 id="how-do-we-use-it-well-it-s-quite-simple-"><strong>How do we use it? Well, </strong>It’s quite simple!</h3><p><strong>Step 0</strong>. We add any necessary categories, IntentFilters, or Permissions in your Manifest!</p><p><strong>Step 1. </strong>Answer this question: Do we have an app that fits into a pre-defined role? If yes, let’s go to <strong>Step 2</strong>. If no, let’s enjoy some ice cream!</p><p><strong>Step 2.</strong> Is this Role available on the current system? We can check this via the `RoleManager` class.</p><pre><code class="language-Kotlin">val roleManager = getSystemService(RoleManager::class.java)
val isRoleAvailable = roleManager.isRoleAvailable(RoleManager.ROLE_BROWSER)</code></pre><p><strong>Step 3.</strong> If this Role is available, is our app holding that role currently? We can check this via the <code>RoleManager</code> too!</p><pre><code class="language-Kotlin">val roleManager = getSystemService(RoleManager::class.java)
val isRoleHeld = roleManager.isRoleHeld(RoleManager.ROLE_BROWSER)</code></pre><p><strong>Step 4. </strong>If we are not holding this role, is now an appropriate time to ask the user to request access for this role? If yes, we use <code>RoleManager</code> for its magical powers of Intent creation 🎩🐰🎉.</p><pre><code class="language-Kotlin">val roleManager = getSystemService(RoleManager::class.java)
val roleRequestIntent = roleManager.createRequestRoleIntent(
        RoleManager.ROLE_BROWSER)
startActivityForResult(roleRequestIntent, ROLE_REQUEST_CODE)</code></pre><p><strong>Step 5. </strong>If the user grants permission for us to hold that role, onActivityResult will be called with <code>RESULT_OK. RESULT_CANCELED</code> will return if the user denied our request, or if conditions for holding that role have not been met (e.g. missing category in your manifest).</p><pre><code class="language-Kotlin">override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
    if (requestCode == ROLE_REQUEST_CODE) {
        if (resultCode == RESULT_OK) {
            // Oh yes :)
        } else {
            // Oh no :(
        }
    }
}</code></pre><p><strong>Step 6. </strong>Done. From there is just a matter of refreshing our UI to reflect the current state of the system!</p><p>Please take a look at a simple example for requesting <code>ROLE_MUSIC</code><em> </em>in<em> </em><a href="https://github.com/wdziemia/RoleManagerExample"><strong>this Github repo!</strong></a></p><hr><h2 id="secret-secrets-are-no-fun-until-you-tell-every-one-">Secret secrets are no fun, until you tell every one!</h2><p>Or until the official documentation is updated 😁! What am I talking about? There seems to be some undocumented roles that are available. One in particular is <code>android.app.role.ASSISTANT</code>.</p><p><em><strong>Update 04/08/19: </strong>Looks like<strong> </strong><code>ROLE_ASSISTANT</code> has been added to the official </em><a href="https://developer.android.com/reference/android/app/role/RoleManager.html#ROLE_ASSISTANT"><em>docs</em></a><em>! Thanks to </em><a href="https://medium.com/u/b1266eb31a2f"><em>Andrew Kelly</em></a><em> for the heads up!</em></p><p>When testing <a href="https://proandroiddev.com/a-new-tool-for-vqa-on-android-585e6f45ef40">Window</a> on Android Q, I noticed a strange error message:</p><figure class="kg-card kg-image-card"><img src="//wdziemia.github.io/content/images/downloaded_images/Android-Q-to-the-Res-Q-/1-7Vc0rv3v-uF_xpVujcVNzg.png" class="kg-image" alt="Android Q to the Res-Q!"></figure><pre><code class="language-bash">2019–03–00 00:00:00.000 12345–67890/? E/RoleControllerServiceImpl: Package does not qualify for the role, package: com.dziemia.w.window, role: android.app.role.ASSISTANT</code></pre><p>This log statement appears when attempting to select the current version of Window (blue icon) on Android-Q. This led to an adventure through the docs, where surprisingly no Assistant role could be found! So, after some sleuthing🕵️‍♀️, I found that all I needed to do was add an additional <code>IntentFilter</code> with <code>&lt;action/&gt;</code> of <code>ASSIST</code> to my launcher activity in my manifest!</p><pre><code class="language-xml">&lt;intent-filter&gt;
    &lt;action android:name="android.intent.action.ASSIST" /&gt;
    &lt;category android:name="android.intent.category.DEFAULT" /&gt;
    &lt;category android:name="android.intent.category.BROWSABLE" /&gt;
&lt;/intent-filter&gt;</code></pre><p><strong>A request for permission through the <code>RoleManager</code> will automatically return <code>RESULT_CANCELED</code> if we fail to include the <code>IntentFilter</code>. </strong>If we do everything correctly though, we are greeted with the following:</p><figure class="kg-card kg-image-card"><img src="//wdziemia.github.io/content/images/downloaded_images/Android-Q-to-the-Res-Q-/1-pTPBT3h-V7Mp0vYIRw3WEw.png" class="kg-image" alt="Android Q to the Res-Q!"></figure><p>The great thing about checking roles within <code>RoleManager</code> is that each of them are defined as a <code>String</code>, so my check method is simply:</p><pre><code class="language-kotlin">const val ROLE_ASSISTANT =  "android.app.role.ASSISTANT"

@TargetApi(Build.VERSION_CODES.Q)
private fun isCurrentAssistAppQ(): Boolean {
    return with(getSystemService(RoleManager::class.java)){
        isRoleAvailable(ROLE_ASSISTANT) &amp;&amp; isRoleHeld(ROLE_ASSISTANT)
    }
}</code></pre><p>Which makes me feel much more secure over what I had to do previously:</p><pre><code class="language-Kotlin">private fun isCurrentAssistAppBase(): Boolean = Settings.Secure
        .getString(contentResolver, "assistant")?.let {
            ComponentName.unflattenFromString(it)?.packageName == packageName
        } ?: false

fun Context.openAssist() {
    val openIntent = Intent(Intent.ACTION_MAIN)
    openIntent.component = ComponentName("com.android.settings", "com.android.settings.Settings\$ManageAssistActivity")
    openIntent.flags = Intent.FLAG_ACTIVITY_NEW_TASK
    startActivity(openIntent)
}</code></pre><p>The main benefit being that I no longer need send user to a different app, potentially having them drop off. I also needed to assume the system includes <code>ManageAssistActivity</code> , which Chrome laptops do not have. Lastly, I don’t need to use some obscure API and pass in a magic variable (“assistant”) to validate the user’s selection within the system settings screen.</p><p>🍋🍋 Easy peasy lemon squeezy! 🍋🍋</p><p>Hope you enjoyed this article! Spam me on Twitter <a href="https://twitter.com/wdziemia">@wdziemia</a>, and as always, happy coding!

</p>]]></content:encoded></item><item><title><![CDATA[Window Update v5]]></title><description><![CDATA[Long Press to Compare, Change Log, and API 23 support!
]]></description><link>//wdziemia.github.io/window-update-v5/</link><guid isPermaLink="false">5fe374eb4e202b72753b096e</guid><dc:creator><![CDATA[Walter Dziemianczyk]]></dc:creator><pubDate>Sun, 10 Mar 2019 00:00:00 GMT</pubDate><content:encoded><![CDATA[<p>A new update is rolling out to the play store!<a href=" https://drive.google.com/open?id=1vPlUpqXg7hN0AGZhBe55ES_e6YTzVnD3"> Direct Download Link.</a></p><figure class="kg-card kg-gallery-card kg-width-wide kg-card-hascaption"><div class="kg-gallery-container"><div class="kg-gallery-row"><div class="kg-gallery-image"><img src="//wdziemia.github.io/content/images/2020/12/1-1qqZgz5ao6_pEU-00SzuPA.png" width="600" height="1066" alt srcset="//wdziemia.github.io/content/images/2020/12/1-1qqZgz5ao6_pEU-00SzuPA.png 600w"></div><div class="kg-gallery-image"><img src="//wdziemia.github.io/content/images/2020/12/1-gTYMi7n-5e5XX7UcCbEMcQ.png" width="600" height="1066" alt srcset="//wdziemia.github.io/content/images/2020/12/1-gTYMi7n-5e5XX7UcCbEMcQ.png 600w"></div></div></div><figcaption>Long Press to Compare, Change log Screen</figcaption></figure><ul></ul><p></p>]]></content:encoded></item><item><title><![CDATA[A new tool for VQA on Android]]></title><description><![CDATA[Window lets you easily debug layouts with a single long press of the home button.
]]></description><link>//wdziemia.github.io/a-new-tool-for-vqa-on-android/</link><guid isPermaLink="false">5fe374eb4e202b72753b096f</guid><dc:creator><![CDATA[Walter Dziemianczyk]]></dc:creator><pubDate>Tue, 29 Jan 2019 00:00:00 GMT</pubDate><media:content url="//wdziemia.github.io/content/images/downloaded_images/A-new-tool-for-VQA-on-Android/1-wQD_EMBirYe-rEHusNQe3g.png" medium="image"/><content:encoded><![CDATA[<h3 id="window-lets-you-easily-debug-layouts-with-a-single-long-press-of-the-home-button-">Window lets you easily debug layouts with a single long press of the home button.</h3><img src="//wdziemia.github.io/content/images/downloaded_images/A-new-tool-for-VQA-on-Android/1-wQD_EMBirYe-rEHusNQe3g.png" alt="A new tool for VQA on Android"><p>Over the past few months I’ve been working on the initial release of a new tool, <a href="https://play.google.com/store/apps/details?id=com.dziemia.w.window">Window</a>. This app overlays rulers and grids on screen, along with info on placement of views within your view hierarchy. The goal of this project is to reduce the time it takes to VQA. VQA? Visual Quality Assurance a.k.a. Pixel Pushing a.k.a. Pulling your hair out for that 1 pixel 😵.</p><hr><h2 id="the-vqa-process-is-slow"><strong>The VQA </strong>process <strong>is slow</strong></h2><p>Before the world of Zeplin and Figma, you had redline docs, which were images produced by a designer, and what you’d use to translate the design into something tangible. It had mockups, specs, heights, widths, text sizes, and everything in-between. This is a slow process with lots of back and forth, and the final result was something that <em>roughly</em> looked like what you want. But, what if the redline doc was missing dimensions? What if it just had wrong information? That meant waiting for an update from design #5pmOnFriday.</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="//wdziemia.github.io/content/images/2020/12/main-qimg-085c91bf0e82cb1c319aa3fd9131f73c.png" class="kg-image" alt="A new tool for VQA on Android" srcset="//wdziemia.github.io/content/images/size/w600/2020/12/main-qimg-085c91bf0e82cb1c319aa3fd9131f73c.png 600w, //wdziemia.github.io/content/images/size/w1000/2020/12/main-qimg-085c91bf0e82cb1c319aa3fd9131f73c.png 1000w, //wdziemia.github.io/content/images/2020/12/main-qimg-085c91bf0e82cb1c319aa3fd9131f73c.png 1536w" sizes="(min-width: 720px) 720px"><figcaption>https://www.quora.com/What-is-redline-document-in-UI-designing</figcaption></figure><p>Today we have powerful tools like Zeplin to help with the redline process. These tools use the dimensions of the labels &amp; images in the source document (Sketch or Photoshop file). This allows you to measure anything in the design, leaving any redline doc in the dust. Zeplin is still dependent on the designer to upload new versions, but it does a good job at removing the risk of having incorrect specs when it’s time to implement.</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="//wdziemia.github.io/content/images/downloaded_images/A-new-tool-for-VQA-on-Android/1-G3trkRtZFp8UIdzCmiH5RQ.png" class="kg-image" alt="A new tool for VQA on Android"><figcaption>https://blog.prototypr.io/getting-started-with-figma-fc0db85c852c</figcaption></figure><p>And then we have <a href="https://www.figma.com/">Figma</a>. Figma is a very powerful tool, essentially combining Photoshop / Sketch &amp; Zeplin into one product. The source file (the design) is the same file that developer uses to spec out measurements. If there are changes, they are immediately shown. There is one single source of truth, so no need to hand off files and lose track of the most recent one. The comment feature and file history lets you see what’s changed and why. The only thing you need to pass between a designer and developer is a URL.</p><p>Whichever design tool we choose, we still need to polish ( 🇵🇱 ಠ‿ಠ). Why? The UI-components measured in PS / Sketch / Figma may not measure to the exact height &amp; width on Android, making this the most tedious step. We have to place what’s shown on screen next to our design and use rulers to make sure our components align.</p><p>In this step, we need to make sure the design size matches the devices’s size. You’re ready to go if you have a design that is the same resolution and size of the device. You will need to compensate if this is not the case. If the design is on a 360 x 640 artboard (MDPI), the device must also match that spec so that the width is 360<strong>dp</strong> and the height is 640<strong>dp</strong>. Example: Nexus 5 and Nexus 5x both have screen resolutions of 1080 x 1920. Both lie in the same density bucket (XXHDPI). However, the physical screen size on the Nexus 5x is 2" larger. This brings the width of the Nexus 5x, in dips, to 411 - not the 360 that we’d expect like that on the Nexus 5.</p><p>This is the most common issue at this step. It trips me up when I forget which Emulator I’m running. Luckily, you can create an emulator with a custom screen size to avoid this. A guide like <a href="https://material.io/tools/devices/">material.io</a> gives important screen spec information.</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="//wdziemia.github.io/content/images/downloaded_images/A-new-tool-for-VQA-on-Android/1-aLzQ3eQ7XPZlOZ-JUvlEpA.png" class="kg-image" alt="A new tool for VQA on Android"><figcaption>https://material.io/tools/devices/</figcaption></figure><p>Now that we have a device that matches our design’s size and resolution, we can scale the design to match the screenshot resolution and compare. We go through the process of dragging a ruler onto screen, and measuring image bounds and text baselines. We screenshot, compare, adjust, build, wait, and repeat.</p><p>This is where <a href="https://play.google.com/store/apps/details?id=com.dziemia.w.window">Window</a> comes into the picture (kind of a pun?). Window reduces the time it takes to VQA because it confirms the placement of UI elements via grids, rulers, and measurements on the device. Developer time is expensive, so the goal is to reduce the frequency of generating builds.</p><p>You can download <a href="https://play.google.com/store/apps/details?id=com.dziemia.w.window">Window from the Google Play Store</a> for free! This project was built with lots of open source software, so my hopes are to open source the project soon too!</p><!--kg-card-begin: markdown--><p><a href="https://play.google.com/store/apps/details?id=com.dziemia.w.window"><img src="//wdziemia.github.io/content/images/2020/12/1-fQoPUZ3Aus8TIDqtZRGK7A.png" alt="A new tool for VQA on Android"></a></p>
<!--kg-card-end: markdown--><hr><h2 id="how-s-it-work">How’s it work?</h2><figure class="kg-card kg-image-card"><img src="//wdziemia.github.io/content/images/downloaded_images/A-new-tool-for-VQA-on-Android/1-XY07GzWaY3IdpgLJMlKNmA.png" class="kg-image" alt="A new tool for VQA on Android"></figure><p>Once you install the app, you’ll be prompted to enable it in the system settings.</p><figure class="kg-card kg-image-card"><img src="//wdziemia.github.io/content/images/downloaded_images/A-new-tool-for-VQA-on-Android/1-4IClTESNYstRu4c1CiYPpA.png" class="kg-image" alt="A new tool for VQA on Android"></figure><p>Window uses this functionality to get UI information of the screen and a screenshot. It then outlines all views on screen and lets you select and see view dimensions and distances. This overtakes the action for long-pressing home, but you get back to this screen via the Window app settings screen. You can also search for “Assist &amp; Voice Input” within the device’s settings app.</p><figure class="kg-card kg-image-card"><img src="//wdziemia.github.io/content/images/downloaded_images/A-new-tool-for-VQA-on-Android/1-ZKzKSZuK0iyMhVWQjCSk7A.png" class="kg-image" alt="A new tool for VQA on Android"></figure><p>When you enable Window as the system assist app, you also need to enable <strong>Use text from screen</strong> and <strong>Use screenshot</strong>. If you attempt to invoke Window by long-pressing the home button without this, you will see a prompt to head back to system settings.</p><figure class="kg-card kg-image-card"><img src="//wdziemia.github.io/content/images/downloaded_images/A-new-tool-for-VQA-on-Android/1-fOuNdyYTuODElqz6g5kVRA.png" class="kg-image" alt="A new tool for VQA on Android"></figure><p>After all settings are enabled successfully, you should see something like this when you <strong>long press the home button</strong>. You’ll see some default start &amp; end 16dp rulers and the views outlined. A checkered pattern will draw for clickable surfaces. This can be disabled within the Window app.</p><pre><code>Default Outline Colors:

Magenta - TextView
Cyan - ImageView
Green - Toolbar
Light Gray - Default</code></pre><p>A future update will allow you to customize these colors.</p><figure class="kg-card kg-image-card"><img src="//wdziemia.github.io/content/images/downloaded_images/A-new-tool-for-VQA-on-Android/1-g6LeAo0Ld2hJQ7f7rEAL_Q.png" class="kg-image" alt="A new tool for VQA on Android"></figure><p>A single tap will let you select a View. It will show the size of the view in DP. You will also see distances from the edge of the screen / content view. You can show pixel values by toggling an option in the Window app. A double tap will allow you to dig in to the view hierarchy, all the way up to the root.</p><figure class="kg-card kg-image-card"><img src="//wdziemia.github.io/content/images/downloaded_images/A-new-tool-for-VQA-on-Android/1-XgbMfV8ypYUuDhS5Ia2Cmg.png" class="kg-image" alt="A new tool for VQA on Android"></figure><p>Finally, you can pinch to zoom to get a better eyes view of what’s going on.</p><h2 id="the-window-app">The Window App</h2><figure class="kg-card kg-image-card"><img src="//wdziemia.github.io/content/images/downloaded_images/A-new-tool-for-VQA-on-Android/1-rlfQL7-klczHllCxlD8TeQ.png" class="kg-image" alt="A new tool for VQA on Android"></figure><p>The Window app gives you control over the overlaid content on screen. Some toggles are available to modify behaviors of the overlay, like the ones mentioned before. You can also toggle Rulers, Grids, and View Outlines.</p><figure class="kg-card kg-image-card"><img src="//wdziemia.github.io/content/images/downloaded_images/A-new-tool-for-VQA-on-Android/1-rErRsNbLOhjuYJ8BHzwwqQ.png" class="kg-image" alt="A new tool for VQA on Android"></figure><p>You can create multiple Rulers and Grids, along with Rows and Columns. They are fully configurable, allowing adjustments for colors, widths, offsets, and more!</p><h2 id="and-that-s-it-so-far-">And that’s it .. so far 😊</h2><p>I hope you find this tool useful in your development workflow! Feel free to reach out to me at <strong>window@dziemia.com</strong> for any funky bugs or feature requests. You can also report issues via <strong>Send Feedback</strong> in the <a href="https://play.google.com/store/apps/details?id=com.dziemia.w.window">Window</a> app!</p><p>Next feature coming up: long press to compare views between each other!</p><p>Enjoy &amp; Happy Coding!</p><p><em><strong>Shout out to </strong></em><a href="https://www.linkedin.com/in/olivialinyc"><em><strong>Olivia Lin</strong></em></a><em><strong>, </strong></em><a href="https://www.linkedin.com/in/reddingdave"><em><strong>David Redding</strong></em></a><em><strong>, and </strong></em><a href="https://twitter.com/_tiwiz"><em><strong>Roberto Orgiu</strong></em></a><em><strong> for their help!</strong></em>

</p>]]></content:encoded></item><item><title><![CDATA[Night Mode ++]]></title><description><![CDATA[Don’t blind your users at 1am, Implement night mode today!
]]></description><link>//wdziemia.github.io/night-mode---/</link><guid isPermaLink="false">5fe374eb4e202b72753b0971</guid><dc:creator><![CDATA[Walter Dziemianczyk]]></dc:creator><pubDate>Thu, 06 Dec 2018 00:00:00 GMT</pubDate><media:content url="//wdziemia.github.io/content/images/downloaded_images/Night-Mode---/1-Ba8Qplz0rzqiU3Mi47BdNA.png" medium="image"/><content:encoded><![CDATA[<img src="//wdziemia.github.io/content/images/downloaded_images/Night-Mode---/1-Ba8Qplz0rzqiU3Mi47BdNA.png" alt="Night Mode ++"><p>Looking at an email at 1:00am and having your eyes crawl back into your brain is exactly why implementing night-mode is a great thing to do for your users. Not only that, there are benefits for battery when your user’s device is running an OLED panel!</p><p>If you are at the start of implementing night mode, I’d suggesting reading <a href="https://medium.com/androiddevelopers/appcompat-v23-2-daynight-d10f90c83e94">this article by Chris Banes</a>, to give you some context and a quick run-through of what you need to do!</p><p>You can also take a look at a <a href="https://github.com/wdziemia/Nightmode">basic example on Github</a>! </p><hr><p>Many Google Apps ship with night-mode controls now-a-days. Some are auto-magical, some are a simple on-off settings, and others are on steroids. Let’s take the simplest case.</p><p>If you’re on Android Pie, you can have the mode follow the system setting. All you need to do is the following:</p><p>1.) Extend your app-theme from DayNight</p><pre><code>@style/Theme.AppCompat.DayNight</code></pre><p>2.) Implement a custom <code>Application</code> class and set the default mode.</p><pre><code class="language-kotlin">AppCompatDelegate.setDefaultNightMode(MODE_NIGHT_FOLLOW_SYSTEM)</code></pre><hr><p>Ok, simple! Let’s get even crazier! <strong>What if we want to auto-magically change mode when it’s night in</strong><em><strong> real-life</strong></em><strong>?</strong></p><p>1.) In our <code>Application</code>, we just need to change the flag we pass into <code>AppCompatDelegate</code> to <code>MODE_NIGHT_AUTO</code></p><p>2.) <strong>Optional: </strong>Add coarse location permission to your manifest. This permission allows for a more precise toggle time. This is <strong>not </strong>necessary, but you will notice your app not aligning with other apps that might have this permission.</p><pre><code class="language-xml">&lt;uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION"/&gt;</code></pre><hr><p>Huh, ok! <strong>So what if I just want to enable night mode to keep some juice in the battery?</strong></p><p>The <code>PowerManager</code> class can tell you if the device is in power-saver mode. You can call <code>PowerManager.isPowerSaveMode()</code> which will return a <code>Boolean</code> . If the <code>Boolean</code> is <code>true</code>, we need enable night mode, if <code>false</code> we disable it. So .. same location in our <code>Application</code> class:</p><pre><code class="language-kotlin">val nightMode = if (powerManager.isPowerSaveMode) MODE_NIGHT_YES else MODE_NIGHT_NO
AppCompatDelegate.setDefaultNightMode(nightMode)</code></pre><p>Great, but adding that change only applies to the instant the <code>Application</code> is created,<strong> how do we react to power-saver dynamically?</strong></p><p>We need to listen to an Intent being broadcast, globally, with an Action of <code>android.os.action.POWER_SAVE_MODE_CHANGED</code>. If we are listening dynamically, we will already be within our launcher/main <code>Activity</code>. We will need to register a <code>BroadcastReceiver</code> within that <code>Activity</code> to react to this change. When that <code>Intent</code> is broadcast, we’ll invoke a method in the <code>Activity</code> to change the value in `AppCompatDelegate` along with on the <code>Activity</code> via its delegate .</p><pre><code class="language-kotlin">private fun onPowerSaverChanged() {
    val nightMode = if (powerManager.isPowerSaveMode) MODE_NIGHT_YES else MODE_NIGHT_NO
    AppCompatDelegate.setDefaultNightMode(nightMode)
    delegate.setLocalNightMode(nightMode)
}</code></pre><p>The <code>Activity</code>’s delegate will then automagically recreate the <code>Activity</code> in order to apply night mode. This is probably a good time to make sure your UI is restoring state properly!</p><hr><p>Good job, You’ve implemented everything you’ve needed to get the following menu in your settings screen:</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="//wdziemia.github.io/content/images/downloaded_images/Night-Mode---/1-tXozpcB1nFcMQwMbUlVC-g.png" class="kg-image" alt="Night Mode ++"><figcaption>Google News dark-theme preference</figcaption></figure><p><strong>So, how do I now control this through settings?</strong></p><p>Many different ways! You could have a helper class which is solely responsible for determining the value to pass through to <code>AppCompatDelegate</code> and your <code>Activity</code>’s delegate. It’s just a matter of telling an <code>Activity</code> that the setting has changed from there. You could do this using a <code>LocalBroadcastManager</code>. Not glamorous, but it’ll work! Your <code>Activity</code> could listen for a local broadcast sent from your settings screen and apply the changes needed.</p><p>If every <code>Activity</code> extends from the same base class, you could have a method to apply night-mode when that setting has changed. This same method can be called when power-saver mode changes as well!</p><pre><code class="language-kotlin">private fun applyNightMode() {
    val nightMode = settingsHelper.getNightModeValue()
    AppCompatDelegate.setDefaultNightMode(nightMode)
    delegate.setLocalNightMode(nightMode)
}</code></pre><p>Ba-da-boom, you now have night-mode on steroids!</p><p>Enjoy &amp; Happy Coding!

</p>]]></content:encoded></item><item><title><![CDATA[Timber!]]></title><description><![CDATA[Making logs a little more useful with Timber and Android Studio.
]]></description><link>//wdziemia.github.io/timber-/</link><guid isPermaLink="false">5fe374eb4e202b72753b0976</guid><dc:creator><![CDATA[Walter Dziemianczyk]]></dc:creator><pubDate>Wed, 28 Mar 2018 00:00:00 GMT</pubDate><media:content url="https://images.unsplash.com/photo-1604679494705-b4718ca115c4?crop=entropy&amp;cs=tinysrgb&amp;fit=max&amp;fm=jpg&amp;ixid=MXwxMTc3M3wwfDF8c2VhcmNofDg1fHxQbGFudCUyMHRyZWV8ZW58MHx8fA&amp;ixlib=rb-1.2.1&amp;q=80&amp;w=2000" medium="image"/><content:encoded><![CDATA[<img src="https://images.unsplash.com/photo-1604679494705-b4718ca115c4?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MXwxMTc3M3wwfDF8c2VhcmNofDg1fHxQbGFudCUyMHRyZWV8ZW58MHx8fA&ixlib=rb-1.2.1&q=80&w=2000" alt="Timber!"><p><em>Question:</em> How can we make logs more useful?<br><em>Answer: <strong>Lil Bit O’ Magic </strong></em>✨</p><h2 id="hiding-timber-behind-an-interface">Hiding Timber behind an interface</h2><p>Let’s say we have an app that is using Timber for logging. We don’t want to call Timber directly so we hide Timber behind an interface. We do this so we can swap out the implementation depending on the environment. We’ll have an Android implementation and a Java implementation. We’ll inject, via Dagger, the Java Impl when running JUnit test and the Android Impl for everything else. So to summarize:</p><!--kg-card-begin: html--><script src="https://gist.github.com/wdziemia/f1759b71297f8832bca4300650242a35.js"></script><!--kg-card-end: html--><p>Great! And Simple! But wait … my Android implementation prints the tag as AndroidLogger<em>… what gives?!</em></p><h3 id="fixing-the-tag">Fixing the Tag</h3><p>A nifty feature of Timber is the automatic class tag generation. This means that we only need to pass in a message to Timber and it will generate a tag for us. Say goodbye to always passing in the same tag for all your messages (e.g. “asd”😛). To do this, Timber creates a new Throwable and gets a StackTraceElement at a certain position in the stack trace. You can think of a StackTraceElement as a method invocation. So, we can get the calling class of our logger if we sift the through the stack trace and find that element. Let’s look at this in the following example:</p><!--kg-card-begin: html--><script src="https://gist.github.com/wdziemia/a456de50db80cf5876ea389e98cd6859.js"></script><!--kg-card-end: html--><p>We have a simple Activity that prints a message when onCreate and onResume are called. The LogCat will look something like this:</p><figure class="kg-card kg-image-card"><img src="//wdziemia.github.io/content/images/downloaded_images/Timber-/1-FUjSpyVSSd7xZTVsc0cVEg.png" class="kg-image" alt="Timber!"></figure><p>If we look at the center of our log we can see our log statements. At the end of the log statements we see the source that called them. Cool! But how’d that work and why do we call throwable.getStackTrace()[1] with a hardcoded index?</p><p>As mentioned earlier, a Throwable will generate a stack trace when it’s created. That stack trace is a list of methods which were invoked that lead up to that Throwable instance creation. Think of this stack trace as a bunch of dominos in a line. One domino will push the next one, so on and so forth. In this case, we are trying to find the finger that pushed the fist domino. That first domino is our printToLogCat method.</p><hr><figure class="kg-card kg-image-card kg-card-hascaption"><img src="//wdziemia.github.io/content/images/downloaded_images/Timber-/1-N-5bNooWsAPOJ0CUvJsTTQ.png" class="kg-image" alt="Timber!"><figcaption>Stack trace example</figcaption></figure><p>We can find this mystical finger(🔮👉) by checking out the stack trace. We can get this stack trace by calling Throwable.getStrackTrace(). This will return an array of StackTraceElement. We see that that the first element (index 0) is the method that is printing the message, same method that creates the instance of the Throwable! If we look at the next element (<strong>index 1</strong>) we can see a method invocation from MainActivity.onCreate(), BINGO! This is the magic number we need to reference for our log statement and any future log statement within MainActivity.</p><p>So, with that knowledge in hand, we can go ahead and fix this tag! Technically, we didn't break the tag creation feature, but we do need to compensate for our abstraction. We can fix this by planting our own DebugTree and overriding the createStackElementTag method. We can take a <a href="https://github.com/JakeWharton/timber/blob/5661b90c4d9003a4303d7a05513ab5d9962f9c8d/timber/src/main/java/timber/log/Timber.java#L587">hint from Timber.DebugTree</a> and see how the tag is generated. Using that same code, we can fix the problem with something like the following:</p><!--kg-card-begin: html--><script src="https://gist.github.com/wdziemia/af6beca81e03cadf1832f59b02f72234.js"></script><!--kg-card-end: html--><p>Let’s break it down 🕺 :</p><p>1.) <strong>Create a new instance of Throwable and get the stack trace</strong>. The stack trace is a StackTraceElement array which is a sequence of method invocations with the first element(index 0) being the method that the Throwable was created.</p><p>2.) <strong>Pick the correct StackTraceElement. </strong>Timber has a hardcoded index of 5, yet our example had an index of 1. Thats because Timber has some extra method invocations to generate a tag before its ready to print. In our case, we really need the 8th element. We need compensate for two extra method invocations in our custom FooTree: createStackElementTag and newStackTraceElement. This gets us to an Index of 7, which equates to the AndroidLogger method invocation. We want to compensate once more to get the caller of AndroidLogger.v()</p><p>3.) <strong>Clean it up. </strong>If on API 24 or greater, we don’t need to limit character length of the tag (23 chars), but we do need to compensate for anonymous classes. We also want to remove the class path as well, same that Timber does.</p><p>4.) <strong>Profit…</strong> via Timber.plant(new FooTree());</p><p>Great! Once thats done we now have an abstraction around Logging with the same functionality! So how can we make this even better?</p><h2 id="let-s-make-logging-great-again">Let’s make logging great again</h2><p>We can do some cool stuff now that we can fetch the proper stack trace element. If you’ve seen a printed stack trace in LogCat, you’ll notice that the file name and the line number are printed at the end of a single stack element frame, linkify’d in blue, like so:</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="//wdziemia.github.io/content/images/downloaded_images/Timber-/1-RNcnRBM3StD0p0yai9UIyQ.png" class="kg-image" alt="Timber!"><figcaption>Exceptional Exceptions!</figcaption></figure><p>What if we can do that same thing but for all logs? We can! LogCat will (usually) see (class_file_name.ext:###) sequence and highlight it as a link. Clicking this link will open the file within the IDE. We can prove this in our example:</p><!--kg-card-begin: html--><script src="https://gist.github.com/wdziemia/138192707e69bcd723827160b33e414d.js"></script><!--kg-card-end: html--><p>Which would look something like the following:</p><figure class="kg-card kg-image-card"><img src="//wdziemia.github.io/content/images/downloaded_images/Timber-/1-UbLxa2AVq4-CkrUtcL68Tw.png" class="kg-image" alt="Timber!"></figure><p>In our Timber Abstraction classes we can do the same by appending the same sort of formatted string to the end of our message (i.e. inAndroidLogger.v()). Better yet, if we have a minSdk of 24, we can have this special format be the tag so it could print a message as <code>I/(MainActivity.java:13): This is My Message</code>.</p><p>Hope this was helpful, happy logging!

</p>]]></content:encoded></item><item><title><![CDATA[Concept: Hacker News]]></title><description><![CDATA[
As some may know, I like working and experimenting with UI. This latest experiment is working on a Hacker News concept. It’s not fully…
]]></description><link>//wdziemia.github.io/ui-experiments--hacker-news/</link><guid isPermaLink="false">5fe374eb4e202b72753b097a</guid><category><![CDATA[Concept]]></category><dc:creator><![CDATA[Walter Dziemianczyk]]></dc:creator><pubDate>Tue, 23 Jan 2018 00:00:00 GMT</pubDate><content:encoded><![CDATA[<p>As some may know, I like working and experimenting with UI. This latest experiment is working on a Hacker News concept. It’s not fully fleshed out, just an idea to put out into the universe!</p><hr><h2 id="launcher">Launcher</h2><figure class="kg-card kg-image-card kg-card-hascaption"><img src="//wdziemia.github.io/content/images/downloaded_images/UI-Experiments--Hacker-News/1-XwcJtgwYMBrpNaDmSpajyg.png" class="kg-image" alt><figcaption>96 x 96</figcaption></figure><p>Nothing crazy here. We use the vibrant orange from the website as our background. We then create a lower case <em>h</em> using 8 pixels as the size of our stems &amp; bar, the length of the bar being 12 pixels. Simple!</p><hr><h2 id="main">Main</h2><figure class="kg-card kg-image-card kg-card-hascaption"><img src="//wdziemia.github.io/content/images/downloaded_images/UI-Experiments--Hacker-News/1-40LCMul3ju_o0TFMoVmLHA.png" class="kg-image" alt><figcaption>360 x 640</figcaption></figure><p>I really like the Pixel 2 XL “Panda” color scheme and that is why I went with contrasting tones for the BottomNavigationView &amp; Toolbar.</p><p><strong>No</strong> Hamburger and Drawer!!!</p><p>I followed the same idea of the list items on HN. The sources of the article is less pronounced but inline with the article headline. This can be achieved using a RelativeSizeSpan and a ForegroundColorSpan.</p><p>We have an Orange bar indicate this article is bookmarked .. I’m not entirely convinced this is the best route, perhaps an icon inline?</p><p>The subtitle. We have 4 data points: up-votes, user, submit time, comments. We use bullet points, visual indicators, and formatting to condense the information as much as possible. Everything extra goes into the overflow to give us a clean and simple look. The<strong> most important information</strong> <strong>is the headline</strong> and keeping the content quickly consumable and skimmable. This is why we are trying to mute any UI noise.</p><hr><h2 id="detail">Detail</h2><figure class="kg-card kg-image-card"><img src="//wdziemia.github.io/content/images/downloaded_images/UI-Experiments--Hacker-News/1-0OuSJeewobLN35fLh6QsoQ.png" class="kg-image" alt></figure><p>Let’s get into the details of the details screen 😄</p><p>The general idea here was keeping the user on the same screen while browsing web content and comments. They’re both consumable content so why treat them differently? We do this by taking an idea from split screen mode!</p><p>Threaded comments: Color scheme borrowed from my favorite reddit app (<a href="https://play.google.com/store/apps/details?id=com.laurencedawson.reddit_sync&amp;hl=en">Sync</a>). Same idea as the Main screen items, quickly consumable. Somewhere in here should be a fab for writing a comment, I was thinking that the fab can appear once you swipe up and increase the size of the comments pane.</p><hr><h2 id="the-end">The End</h2><p>I told you this was short! <a href="https://drive.google.com/file/d/1YVExS4oEz9OY8wbgyfse2GzzsagkB6Jl/view?usp=sharing">Click here for the sketch file</a>. Thanks 😄

</p>]]></content:encoded></item><item><title><![CDATA[Fonts as a Resource]]></title><description><![CDATA[
The introduction of API 26 brought a lot of great features to the Android OS. One specific feature that has been lacking (and a thorn in my…
]]></description><link>//wdziemia.github.io/fonts-as-a-resource/</link><guid isPermaLink="false">5fe374eb4e202b72753b0977</guid><dc:creator><![CDATA[Walter Dziemianczyk]]></dc:creator><pubDate>Mon, 30 Oct 2017 00:00:00 GMT</pubDate><content:encoded><![CDATA[<p>The introduction of API 26 brought a lot of great features to the Android OS. One specific feature that has been lacking (and a thorn in my side) is proper font support. If you were lucky enough to just need legacy support, like Roboto, then something like <a href="https://github.com/johnkil"><em>johnkil</em></a><em>/</em><a href="https://github.com/johnkil/Android-RobotoTextView"><em>Android-RobotoTextView</em></a> would suffice. However, different projects have unique design languages which translates to various typefaces. These same typefaces are not bundled with the Android OS by default, finding yourself in a situation with having to roll your own solution. To top that off, you could never preview the typeface in question in the IDE layout editor.</p><h3 id="before-api-26">Before API 26</h3><p>If you wanted to roll your own fonts you’d probably do something like the following:</p><p><strong>Step 1. </strong>Add your OTF/TTF files to assets<br><strong>Step 2.</strong> Create a custom view to support said OTF/TTF files<br><strong>Step 3.</strong> Create some construct in XML to reference each file to then reference in your Layout files<br><strong>Step 4.</strong> Create style attributes for your <code>View</code> that support said construct<br><strong>Step 5. </strong>Read in the typeface value and fetch that typeface within your <code>View</code><br><strong>Step 6.</strong> Cache that typeface in some sort of static map to prevent loading in the same font file multiple time<br><strong>Step 7.</strong> Made sure to prevent fetching typeface if <code>View.isInEditMode()</code> returns true so that the editor is able to render the view…with the typeface actually rendering<br><strong>Step 8.</strong> Create any subclasses of <code>TextView</code> you’d need (e.g. <code>EditText</code>, <code>Button</code>) to enable font support for those <code>View</code> elements.<br><strong>Step 9.</strong> Profit??</p><p>With the introduction of <code>DataBinding</code>, that process is cut down by a bit. You wouldn’t need to roll your own custom view anymore but you’d still be responsible for caching the typeface file. On top of that, the hassle around adding and referencing each typeface file is still there.</p><h3 id="api-26-">API 26+</h3><p>With API 26, supporting fonts are drastically simpler to do.</p><p><strong>Step 1.</strong> Add your OTF/TTF files to <code>res/font</code><br><strong>Step 2.</strong> Reference that file using <code>android:fontFamily</code> attribute on anything that extends <code>TextView</code>. (e.g <code>android:fontFamily="@font/comic_sans"</code>)</p><p>Thats it, the typefaces are cached internally and it works on all subclasses of <code>TextView</code> out of the box … all the way back to <em>API 14!</em></p><p><a href="https://developer.android.com/guide/topics/ui/look-and-feel/fonts-in-xml.html">More info here</a>.</p><p><em><strong>Time to apply comic-sans to all the things!</strong></em></p><hr><p><strong>Small note:</strong> Let’s say you find yourself interrogating a TypedArray for a font but are on an API &lt; 26. Instead of calling <em><code>TypedArray.getFont() //API 26)</code> </em>you can get the font resource id via <em><code>TypedArray.getResourceId()</code> </em>and fetch the resource using<em> <code>ResourcesCompat.getFont()</code>.</em></p><p>Enjoy!

</p>]]></content:encoded></item><item><title><![CDATA[9-Patch, PhotoShop, and you!]]></title><description><![CDATA[An in-depth tutorial on creating a 9-Patch, from start to finish!]]></description><link>//wdziemia.github.io/9-patch--photoshop--and-you-/</link><guid isPermaLink="false">5fe374eb4e202b72753b0978</guid><dc:creator><![CDATA[Walter Dziemianczyk]]></dc:creator><pubDate>Sun, 29 Jan 2017 00:00:00 GMT</pubDate><media:content url="//wdziemia.github.io/content/images/2020/12/1_TDmoe9Q-ZSMHjW4OWJoNyg.png" medium="image"/><content:encoded><![CDATA[<h3></h3><h3 id="what-s-all-this-about">What’s all this about?</h3><img src="//wdziemia.github.io/content/images/2020/12/1_TDmoe9Q-ZSMHjW4OWJoNyg.png" alt="9-Patch, PhotoShop, and you!"><p>This article will teach you all about creating a 9-patch with PhotoShop! This article is targeted towards devs who are pretty familiar with using these drawables but lack in photoshop-fu. I wrote this tutorial a while ago but might as well get it out there instead of it collecting digital dust!</p><h3 id="what-is-9-patch-and-how-does-it-compare-with-xml-shape-drawables">What is 9-Patch and how does it compare with XML Shape drawables?</h3><p>9-Patch let’s you create scalable raster graphics for all your UI components! They come in handy when you want to theme your UI and get a custom look.</p><p>You may be asking yourself, why can’t I just create an XML shape drawable? You certainly could but things like overdraw come into play if you create one with multiple overlapping shapes. For example, say we have the following code:</p><pre><code class="language-xml">&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;layer-list xmlns:android="//schemas.android.com/apk/res/android"&gt;

    &lt;item&gt;
        &lt;shape&gt;
            &lt;solid android:color="@android:color/white"/&gt;
        &lt;/shape&gt;
    &lt;/item&gt;

     &lt;item&gt;
        &lt;shape 
            android:left="1dp" 
            android:top="1dp"
            android:right="1dp"
            android:bottom="1dp"&gt;
            &lt;solid android:color="@android:color/black"/&gt;
        &lt;/shape&gt;
    &lt;/item&gt;

&lt;/layer-list&gt;</code></pre><p>Overdraw is measured by the number of times the system takes to draw what’s on screen. If we have a rectangle with a stroke, like the example above, that counts as two drawing passes. The more drawing passes you have, the more time it takes to render your view hierarchy. It may not seem like a big deal now, but it becomes important when you want to have some silky smooth scrolling in your ListView/RecyclerView.</p><p>What would I recommend XML shapes for? Well, anything that can be accomplished in a single drawing pass. For example, I tend to implement some gradients within my designs. XML shapes work perfectly in that case as it save time w/ exporting assets. You can also use that drawable anywhere and are not restricted by the dimensions of your view if you were to use a PNG.</p><h3 id="let-s-get-started-boot-up-photoshop-">Let’s get started, Boot up PhotoShop!</h3><p>Let’s make a simple looking button for our super-duper-expert-ace interface. First things first, make sure the units for your rulers is set to <strong>Pixels</strong>. This can be found in (<strong>File &gt; Preferences &gt; Units &amp; Rulers &gt; Units</strong>)</p><p><strong>Step 1. Create a new file!</strong><br>Hit <strong>File &gt; New</strong> (<em>⌘N) </em>and<em> </em>create a <strong>64px x 64px </strong>image at a resolution of 72ppi. You can name it whatever you’d like (adding the .9 doesn’t matter just yet).</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="//wdziemia.github.io/content/images/downloaded_images/9-Patch--PhotoShop--and-you-/1-wHq7H4yM_EJoi0iKaN75RQ.png" class="kg-image" alt="9-Patch, PhotoShop, and you!"><figcaption>Create a 64px by 64px image @ 72ppi.</figcaption></figure><p><strong>Step 2. It’s so empty, let’s set up our canvas!</strong></p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="//wdziemia.github.io/content/images/downloaded_images/9-Patch--PhotoShop--and-you-/1-3pMIFrEhUmJc8g3pRSaPLQ.png" class="kg-image" alt="9-Patch, PhotoShop, and you!"><figcaption>Our new canvas!</figcaption></figure><p>We have our empty canvas on screen now. First we need some rulers! Rulers help us align our object with the pixel grid. This let’s us keep nice crisp edges, which is essential for a clean looking UI. Let’s use these bad boys! Do this by hitting <strong>View &gt; Rulers (</strong><em>⌘R).</em></p><figure class="kg-card kg-image-card"><img src="//wdziemia.github.io/content/images/downloaded_images/9-Patch--PhotoShop--and-you-/1-SGtEdIx_fOh1T4Koj7CJgg.png" class="kg-image" alt="9-Patch, PhotoShop, and you!"></figure><p>You can now place a guide by dragging from a ruler on to the canvas. (Tip: Hold shift while dragging to have it snap to the pixel grid). You could also hit <strong>View &gt; New Guide </strong>and manually enter the position of each guide.</p><p>Your task: Put a guide all along the border and another four 8px inside our canvas. You should end up with this:</p><figure class="kg-card kg-image-card"><img src="//wdziemia.github.io/content/images/downloaded_images/9-Patch--PhotoShop--and-you-/1-cWJMJY3iYKzlvAvmjEvxwQ.png" class="kg-image" alt="9-Patch, PhotoShop, and you!"></figure><p><strong>Step 3. Let’s make some stuff, eh? </strong><em>( I’m not Canadian, I’m sorry ☹ )</em></p><p>Find the Rectangle tool(<em>U</em>) in your Tools menu <strong>(Window &gt; tools)</strong>. It may be hidden, so find the button that looks like a 2D shape, click and hold to expose a popup menu and hover over <strong>Rectangle Tool. </strong>Release<strong>.</strong></p><!--kg-card-begin: markdown--><p><img src="//wdziemia.github.io/content/images/2020/12/1-JJB_ZH-UqrlwUWbLwIg10Q.png" alt="9-Patch, PhotoShop, and you!"></p>
<!--kg-card-end: markdown--><p>Once you have that selected, click and drag from top-left intersection of our inner guides to the bottom right of the inner. This should of make a new layer in our Layers window. You can expose this window by hitting <strong>Window &gt; Layers </strong>(fn F7).</p><figure class="kg-card kg-image-card"><img src="//wdziemia.github.io/content/images/downloaded_images/9-Patch--PhotoShop--and-you-/1-EPhQiKnraRpyJmGfHGIpeQ.png" class="kg-image" alt="9-Patch, PhotoShop, and you!"></figure><p>Now that we have a our white square, let’s add a border and shadow around it. Right click the “Shape 1” layer and select <strong>Blending Options</strong>.</p><figure class="kg-card kg-image-card"><img src="//wdziemia.github.io/content/images/downloaded_images/9-Patch--PhotoShop--and-you-/1-Y-Zp038MgUEmWkN5psrp9Q.png" class="kg-image" alt="9-Patch, PhotoShop, and you!"></figure><p>Let’s check the <strong>Drop Shadow </strong>option from the left menu. Let’s also add a dark-gray <strong>Stroke</strong> on the inside of our rectangle (make sure your settings are the same!).</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="//wdziemia.github.io/content/images/downloaded_images/9-Patch--PhotoShop--and-you-/1-1AuoccjBh8zi_a_NFhrvwg.png" class="kg-image" alt="9-Patch, PhotoShop, and you!"><figcaption>Stroke color in the picture is light-gray, pick a darker gray as light-gray will blend with our shadow.</figcaption></figure><p>The (almost) finished product is as follows. You should have something like this:</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="//wdziemia.github.io/content/images/downloaded_images/9-Patch--PhotoShop--and-you-/1-nNGMorefJUP2q6HXUrvArQ.png" class="kg-image" alt="9-Patch, PhotoShop, and you!"><figcaption>White background added to show the shadow.</figcaption></figure><p><strong>Step 3. Let’s put the .9 in .9.png!</strong><br>This is how a 9-Patch works, and is the most important part. We must now designate the fill and repeat parts of the image. The <strong>1px</strong> border of our image is read by the system and it is imperative that no pixel in that border be filled for anything other than our markers. The <strong>left</strong> and <strong>top</strong> border designates which part of the<strong> image is repeated</strong>. The <strong>right</strong> and <strong>bottom</strong> designates the <strong>fill</strong>.</p><p>We have more than enough space around the border, so we don’t need to expand our canvas. If you ever do, you can hit <strong>Image &gt; Canvas Size</strong> (<em>⌥⌘C) </em>and add <strong>2px</strong> to the width and <strong>2px</strong> to the height.</p><p>Let’s clear our Guides (<strong>View &gt; Clear Guides</strong>) and add 4 new ones, <strong>1 px</strong> from each edge.</p><figure class="kg-card kg-image-card"><img src="//wdziemia.github.io/content/images/downloaded_images/9-Patch--PhotoShop--and-you-/1-9XyqW57HgsOxVuluROG4cA.png" class="kg-image" alt="9-Patch, PhotoShop, and you!"></figure><p>Let’s set our<strong> foreground color </strong>to<strong> black(#000000) </strong>in our<strong> </strong>Tools window<strong>, </strong>and then select the Rectangular Marquee Tool. We also need to create a <strong>new layer </strong>for our markers (<strong>make sure it is selected).</strong></p><!--kg-card-begin: markdown--><p><img src="//wdziemia.github.io/content/images/2020/12/1-yog-52uTtKqq4DGFpeTkFA.png" alt="9-Patch, PhotoShop, and you!"><br>
Rectangular Marquee Tool</p>
<p><img src="//wdziemia.github.io/content/images/2020/12/1-e7muEGxm8RXPXDt5C84Pew.png" alt="9-Patch, PhotoShop, and you!"><br>
Foreground is black</p>
<p><img src="//wdziemia.github.io/content/images/2020/12/1-F2d017GKRqxMdQxfo9xgQg.png" alt="9-Patch, PhotoShop, and you!"><br>
Create &amp; Select the new Layer</p>
<!--kg-card-end: markdown--><p>Now, let’s <strong>select the middle 8 Pixels</strong> on the<strong> left edge</strong> with the marquee tool. Hover over the left guide, click and drag left + down/up. This area should have some moving lines around it. Release the cursor to make a selection and Press <strong>G</strong> (Paint bucket). Our cursor should now be a Paint bucket! Click into this selected area to fill it with the foreground color(black). <strong>Do the same thing for the top edge! </strong>Your edges should look something like this:</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="//wdziemia.github.io/content/images/downloaded_images/9-Patch--PhotoShop--and-you-/1-um2dJMt3RPUUMP_iyFRybA.png" class="kg-image" alt="9-Patch, PhotoShop, and you!"><figcaption>The pink was added to show you the area that the system will use to scale our image vertically and horizontally.</figcaption></figure><p>Our fill are the opposite edges. These borders tells the system where the content goes. If we are placing this graphic as the background for an ImageView, this area indicates where our image will be placed. Select<strong> the area that are one pixel below/above the stroke, for both the bottom and the right edge. </strong>You should end up with something like this:</p><figure class="kg-card kg-image-card"><img src="//wdziemia.github.io/content/images/downloaded_images/9-Patch--PhotoShop--and-you-/1-PstXYLuXjxtigRc1EXRsFg.png" class="kg-image" alt="9-Patch, PhotoShop, and you!"></figure><p>So, if we place an Image in that fill, it would look like the following:</p><figure class="kg-card kg-image-card"><img src="//wdziemia.github.io/content/images/downloaded_images/9-Patch--PhotoShop--and-you-/1-AOVVUxhsjc1okebOdTJ-NQ.png" class="kg-image" alt="9-Patch, PhotoShop, and you!"></figure><p>All thats left is to save our image into its respective bucket. Go to <strong>File &gt; Save for Web &amp; Devices.</strong> Hit Save.</p><figure class="kg-card kg-image-card"><img src="//wdziemia.github.io/content/images/downloaded_images/9-Patch--PhotoShop--and-you-/1-BaBIW8jwUpmPcMmrzL-Ozw.png" class="kg-image" alt="9-Patch, PhotoShop, and you!"></figure><p>Save the image into its respective bucket (XHDPI) and <strong>make sure to add the .9 between the file name and png file extension</strong>! It is <strong>very important</strong> that you do this or the system will not recognize that you are using a 9-Patch!</p><figure class="kg-card kg-image-card"><img src="//wdziemia.github.io/content/images/downloaded_images/9-Patch--PhotoShop--and-you-/1-eybAT7H2Wxfp_hv1yj_jpw.png" class="kg-image" alt="9-Patch, PhotoShop, and you!"></figure><p>All thats left is reference it in some or code using <strong>@drawable/btn_super_duper (XML) </strong>or<strong> R.drawable.btn_super_duper (Java)</strong></p><p>Our final graphic:</p><!--kg-card-begin: markdown--><p><img src="//wdziemia.github.io/content/images/2020/12/1-rNLYaEh3pXUnR4m9M40M6A-1.png" alt="9-Patch, PhotoShop, and you!"></p>
<!--kg-card-end: markdown--><h3 id="final-words">Final words</h3><p>I hope you found this tutorial/article(or tutor-icle…brilliant) helpful! Until next time!</p><p>Thanks!

</p>]]></content:encoded></item><item><title><![CDATA[Google Drive missing a feature? Write one.]]></title><description><![CDATA[
If you’re not familiar with Google Scripts, check it out. Its pretty cool tool to let you automate tasks for various Google services. When…
]]></description><link>//wdziemia.github.io/google-drive-missing-a-feature--write-one-/</link><guid isPermaLink="false">5fe374eb4e202b72753b0975</guid><dc:creator><![CDATA[Walter Dziemianczyk]]></dc:creator><pubDate>Wed, 27 Jul 2016 00:00:00 GMT</pubDate><content:encoded><![CDATA[<p>If you’re not familiar with Google Scripts, <a href="https://www.google.com/script/start/">check it out</a>. Its pretty cool tool to let you automate tasks for various Google services. When I signed up for the LIRR train alert email service, I quickly found out that they come in fairly often. I had a filter that applied a label and skipped inbox which worked well, the only thing is, I would have to go in and manually delete after they accumulated. This is when I used my Google-fu to find a way of automating that task. Once I found Google Scripts, I wrote a short script to delete emails after 24 hours who were tagged with a “LIRR” label. Perfect👌.</p><hr><p>So … guess what? You can’t get email notifications for specific folders on Google Drive.</p><figure class="kg-card kg-image-card"><img src="//wdziemia.github.io/content/images/downloaded_images/Google-Drive-missing-a-feature--Write-one-/1-iZi01hWPf4C1ouKDAtJxHg.gif" class="kg-image" alt></figure><p>Right Ryan Reynolds, what if we could? What if my buddy Jimmy-Bob wanted to add a few files of shark-kittens to a shared folder of ours and not have to tell me manually(😵). No dice…..UNTIL NOW!</p><p>So basic idea: Create a place to a read/write a time stamp. If a file was updated after that timestamp, send an email to a list of email addresses. Simple enough, lets do this 😎.</p><hr><pre><code class="language-javascript">var folderName = ‘kittens’; 
var dataStorefileName = ‘last_updated_kittens_store’; 
var emails = [‘firstEmail123@example.com’, ‘otherEmail124@example.com’];</code></pre><p>First, we define some hardcoded values where <strong>folderName </strong>is the folder we are checking, <strong>dataStorefileName </strong>is the file where we store our last-checked timestamp, and <strong>emails </strong>is a list emails to send an update to.</p><pre><code class="language-javascript">var storeFiles = DriveApp.getFilesByName(dataStorefileName); 
var currentTime = new Date().getTime();  
var lastCheckedDate = new Date(0);

if (storeFiles.hasNext()){    
  var storeFile = storeFiles.next();    
  var content = Number(storeFile.getBlob().getDataAsString());      
  lastCheckedDate = new Date(content);      
  storeFile.setContent(currentTime);  
} else {    
  DriveApp.createFile(dataStorefileName, currentTime);    
  return;  
}</code></pre><p>Next, we check if <strong>dataStorefileName </strong>exists, if so then we read in the time from the file. When then update the file for the next time the script executes. If the file does not exist, we write a new file with the current time and finish the script (most likely first run).</p><pre><code class="language-javascript">var emailBody = ‘New files have been added to ‘ + folderName + ‘. Files added: \n\n’; 
var folder = DriveApp.getFoldersByName(folderName); 
while (folder.hasNext()) { 
  var kittensFolder = folder.next(); 
  var files = kittensFolder.getFiles(); 
  var updatedFilesFormatted = ‘’; 

  // If there are files in the folder 
  if (files.hasNext()){ 
    while (files.hasNext()){ 
      var file = files.next(); 
      // And if the lastUpdated date is greater than the lastCheckedDate 
      if (file.getLastUpdated() &gt;= lastCheckedDate){ 
        // Format &amp; appened to a String 
        updatedFilesFormatted = updatedFilesFormatted.concat(file.getName() + ‘\n’); 
      } 
    } 

    // If our formatted string is not empty, email the list to emails     
    if (updatedFilesFormatted.length &gt; 0){ 
      for (var i = 0; i &lt; emails.length; i++){    
        GmailApp.sendEmail(emails[i], folderName + ‘ was updated’, emailBody.concat(updatedFilesFormatted)); 
      } 
    } 
  } 
  break; 
}</code></pre><p>Lastly, we iterate through all the files. If <strong>File.getLastUpdated </strong>returns a value greater or equal to <strong>lastCheckedDate</strong>, append the file-name to a string. We then check to see to see if <strong>updatedFilesFormatted </strong>is empty. If its not, send an email to each of the email address in the <strong>emails</strong> array.</p><hr><p>Thats it! Next step would be the time trigger. You can add one through Resouces &gt; Current Project’s Triggers in the gscript dev window. In this case we would use a<strong> time-based trigger </strong>with whatever interval you want. This time based trigger means that the script will execute at every interval you specify (i.e. every 1 min, 5 min, 1 hour, etc..).</p><p>You can view the full source on my<strong> </strong><a href="https://gist.github.com/wdziemia/c45a59d13510fcd2f273f8e0583cb8d9"><strong>Github</strong></a><strong>. </strong>Note, I wrote this in about an hour so its far from perfect, but hey, thats why we iterate.</p><p>

</p><figure class="kg-card kg-image-card"><img src="//wdziemia.github.io/content/images/downloaded_images/Google-Drive-missing-a-feature--Write-one-/1-Mjpt0QLY7Vwa8V2ygpUTGA.gif" class="kg-image" alt></figure>]]></content:encoded></item><item><title><![CDATA[For those beginning to use Animations in Android.]]></title><description><![CDATA[ViewPropertyAnimator and using interpolators…
]]></description><link>//wdziemia.github.io/for-those-beginning-to-use-animations-in-android--/</link><guid isPermaLink="false">5fe374eb4e202b72753b0979</guid><category><![CDATA[Animation]]></category><category><![CDATA[Android]]></category><dc:creator><![CDATA[Walter Dziemianczyk]]></dc:creator><pubDate>Sun, 12 Jan 2014 00:00:00 GMT</pubDate><media:content url="//wdziemia.github.io/content/images/2020/12/1-JnET558yEsYikJ3nOYxVcw.png" medium="image"/><content:encoded><![CDATA[<h3></h3><h3 id="background-info">Background info</h3><img src="//wdziemia.github.io/content/images/2020/12/1-JnET558yEsYikJ3nOYxVcw.png" alt="For those beginning to use Animations in Android."><p>With UI/UX taking the center stage in Android, the dev team introduced the ViewPropertyAnimator in v3.0(HoneyComb) to simplify how we animate views. Compared to the original Animation API and ObjectAnimators, a ViewPropertyAnimator is more efficient, especially when animating 2 or more properties, and it’s syntax is also <strong>a lot</strong> cleaner.</p><p>When we are using any animation API, we may want to use an Interpolator. There are many types of Interpolator and they are all responsible for one thing, skewing output of the animation to give an added effect. This effect could be, but are not limited to, an acceleration, deceleration, or even a bounce.</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="//wdziemia.github.io/content/images/downloaded_images/For-those-beginning-to-use-Animations-in-Android--/1-C-My8tQ0W7ixlvwbY3cxVA.png" class="kg-image" alt="For those beginning to use Animations in Android."><figcaption>cos(​(x+​1)*​π)/​2+​0.5</figcaption></figure><p>An interpolator has an input value from 0 to 1. This value gets plugged into a formula and the result of the equation is the interpolated value.</p><p>The diagram to the left illustrates the the values output from the AccelerateDecelerate interpolator (default for ViewPropertyAnimator) . On-screen, the animation will start slow, speed up and then slow down before coming to rest.</p><hr><h3 id="the-situation">The Situation</h3><p>So, lets say we have a sweet little form that has a bunch of EditTexts. Each EditText does some fancy text validation and the result is one of two possible animations:</p><p>1.) Error — When moving to the next focusable view, the EditText should do a “shake” animation to indicate an invalid input. The shake would be a movement along the X-axis of 8 dips, back and forth</p><pre><code class="language-java">//The following code could be how we implement the animation.I //extended the duration as the default duration(300ms) would be //a bit too fast. 

editText.animate().translationX(8dp).setInterpolator(new CycleInterpolator(2)).setDuration(450);</code></pre><p>2.) Valid — Move the EditText outside of its parent, so thats its not visible, and animate a new view in to take its place.</p><pre><code class="language-java">//Lets assume that editText is starting off at position  0 and //otherView is starting off at position -mParentWidth. For the z-//order, otherView is on-top of editText 

editText.animate().translationX(mParentWidth); otherView.animate().translationX(0);</code></pre><hr><h3 id="the-problem-we-will-run-into-">The problem we will run into.</h3><p>When we put input some invalid text, the view will do a jiggle. Now, lets say we immediately fix our error. You would think the “valid-state” animation would trigger… it will, but not as we would expect. Because we didn't set an interpolator on the EditText in the valid-state, it will reuse the CycleInterpolator that was set in the error-state. Our output animation will be the EditText doing a massive shake (because we are moving a distance of mParentWidth) and otherView will then animate and rest on top of it. That ain’t right.</p><hr><h3 id="the-solution"><strong>The Solution</strong></h3><p>We can’t let the view reuse its interpolator so setting the valid-state animation’s interpolator back to <a href="//developer.android.com/reference/android/view/animation/AccelerateDecelerateInterpolator.html">default</a> would suffice.</p><p>What else? Since we’re only doing a simple translate, using <a href="//developer.android.com/reference/android/animation/ObjectAnimator.html">ObjectAnimator</a> for both our animations would work as well.

</p>]]></content:encoded></item><item><title><![CDATA[Scraping a Feature Together]]></title><description><![CDATA[Lorem Ipsum Dolor sit amet]]></description><link>//wdziemia.github.io/the-cool-kids-way-to-scrape-pages/</link><guid isPermaLink="false">5fe255174e202b72753b08a0</guid><category><![CDATA[YQL]]></category><category><![CDATA[Scraping]]></category><category><![CDATA[Data]]></category><dc:creator><![CDATA[Walter Dziemianczyk]]></dc:creator><pubDate>Thu, 21 Mar 2013 12:24:00 GMT</pubDate><media:content url="https://images.unsplash.com/photo-1516259762381-22954d7d3ad2?crop=entropy&amp;cs=tinysrgb&amp;fit=max&amp;fm=jpg&amp;ixid=MXwxMTc3M3wwfDF8c2VhcmNofDZ8fGNvZGV8ZW58MHx8fA&amp;ixlib=rb-1.2.1&amp;q=80&amp;w=2000" medium="image"/><content:encoded><![CDATA[<img src="https://images.unsplash.com/photo-1516259762381-22954d7d3ad2?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MXwxMTc3M3wwfDF8c2VhcmNofDZ8fGNvZGV8ZW58MHx8fA&ixlib=rb-1.2.1&q=80&w=2000" alt="Scraping a Feature Together"><p>YQL (<a href="https://en.wikipedia.org/wiki/Yahoo!_Query_Language">Yahoo Query Language</a>) allows you to do amazing things, and has many feeds for a developer to play with. In Peak Stocks, we use it for Option Chains and it works beautifully. An additional feature that we'd thought of was expanding social media feeds. We've gotten a lot of requests for twitter and thought, why not the yahoo message boards too? This is where YQL comes into play. </p><p>YQL has community tables, which aren't actual SQL tables. These "tables" are just XML files that scrape pages or using existing feeds and return a response object that is formatted to your liking. Within YQL console, these XML files are passed off a tables making it seem like your actually accessing a database. Anyway, the community tables allow anyone to create their own custom table, be it through the methods mentioned earlier. The finance message boards dont have an open API so i had to use the page scraping method. Having not a lick of experience in doing any of this, it took me a couple of hours to get it going, with countless attempts of trial and error (view the commit history, you'll see). Once i finally got some data to work with, it got easier and easier. The final XML file can be found on my GitHub <a href="https://www.blogger.com/u/1/blog/post/edit/575225956679068977/6613830476794116182#">here</a>. </p><p>The structure of the JavaScript is very simple, its a try-catch block and 2 methods. One method gets the next-page URL and the other loops through the <code>&lt;tr&gt;</code> elements within <code>&lt;tbody&gt;</code> and appends the rows to a <code>&lt;messages&gt;</code> element. </p><figure class="kg-card kg-code-card"><pre><code class="language-JSON">{
    "query": {
        "count": 1,
        "created": "2013-03-20T22:48:092",
        "lang": "en-US",
        "results": {
            "result": {
                "base_url": "//finance.yahoo.com",
                "next_page": "/mb/forumview/?&amp;bn=12b865d6-8061-30c4-86c1l-40adf7076aee&amp;page=3",
                "size": "20",
                "symbol": "GOOG",
                "message_board": {
                    "messages": [
                        {
                            "title": "SHORT THIS MONSTER BUBBLEEEEEEEEEEEEEE INTOOOOO THE GROUNDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD...",
                            "link": "/mbview/threadview/?&amp;bn=12b865d6-8061-30c4-86c1-40adf7076aee&amp;tid=1363805153334-73fc3ece-f9cd-4819-b5b6-d9cc206bc590&amp;t1ls=lat2Cdt2C20%2C3",
                            "published": {
                                "time": "4 hours ago",
                                "user": "pharmaheroouu",
                                "user_link": "/mbview/userview/?&amp;u=pharmaheroouusébn=12b865d6-8061-30c4-86c1-40adf7076aee"
                            },
                            "popularity": {
                                "up": "0",
                                "down": "0"
                            },
                            "replies": {
                                "count": "1",
                                "last_date": "4 hours ago",
                                "last_user": "pharmaheroouu",
                                "last_user_link": "/mbview/userview/?&amp;u=pharmaheroouvébn=12b865d6-8061-30c4-86c1-40adf7076aee"
                            }
                        }
                    ]
                }
            }
        }
    }
}</code></pre><figcaption>Output for <code>GOOG</code></figcaption></figure><p>Within the YQL console, you can have two YQL queries to choose from:</p><figure class="kg-card kg-code-card"><pre><code class="language-SQL">SELECT * FROM messageboard WHERE symbol='GOOG';</code></pre><figcaption>Most basic YQL, giving you page 1 of the message board.</figcaption></figure><figure class="kg-card kg-code-card"><pre><code class="language-SQL">SELECT * FROM messageboard WHERE symbol='GOOG' AND page=$LINK;</code></pre><figcaption>Additional query allows you to pick which page you'd like. The page value is given in the initial URL request as <code>link</code></figcaption></figure><p>As it stands, the file only parses through the a message board for a particular stock, getting all the threads within it. While it does provide you the the thread link, there is no way to get a feed for that individual thread.....yet. <br><br>The next step is to create another file that handles an individual thread. This shouldn't be difficult since I have experience from creating this one. </p>]]></content:encoded></item><item><title><![CDATA[Concept: Fitness]]></title><description><![CDATA[<p>I've been going to the gym recently and noticed that i basically do the same exercises each time. I thought to myself "Why cant there be an app that gives me a list of workouts so that I dont get any plateau effect in my routine?" I looked around the</p>]]></description><link>//wdziemia.github.io/temere-fitness-catchy-slogan-goes-here/</link><guid isPermaLink="false">5fe2505f4e202b72753b080c</guid><category><![CDATA[Concept]]></category><category><![CDATA[YQL]]></category><dc:creator><![CDATA[Walter Dziemianczyk]]></dc:creator><pubDate>Thu, 28 Feb 2013 14:32:00 GMT</pubDate><content:encoded><![CDATA[<p>I've been going to the gym recently and noticed that i basically do the same exercises each time. I thought to myself "Why cant there be an app that gives me a list of workouts so that I dont get any plateau effect in my routine?" I looked around the play store but couldn't find anything. One app would make me pay for predefined routines while others where just a stew of text and gradients. Some apps only provided workouts for a single muscle group. What is an android developer to do?<br><br>Well, I started off with a very basic idea in my head and worked from there. The current goal is to get something simple out and then grow it into something beautiful. <br>The first small step was a name. Something with the words gym rat, random, and android. The word temere is none of those, perfect! (but seriously, any suggestions are appreciated!).</p><figure class="kg-card kg-image-card"><img src="//wdziemia.github.io/content/images/2020/12/ic_launcher.png" class="kg-image" alt></figure><p>The next small step is the launcher icon. I saw a gym-rat badge and made it android-esque. I like the icon as its simple and gives the user a basic idea of what the app is about. It will probably change as id like to change the name but it'll do for now. Id also like to follow design guidelines and make it 3D, in due time i suppose. <br></p><p>Onto the bigger stuff, interface design. The first step was thinking how the app functions. There are three things it needs to do:</p><ul><li>Step 1.) Activity : Allow a user to set what workouts they do and when</li><li>Step 2.) FragmentActivity : Exercises :<br>			- Fragment: List of exercise<br>			- Fragment: Detail view on an exercise</li></ul><p>Basic Functionality: ✅. I tend to shoot straight to creation of high-fidelity models as I can usually picture wireframes in my head. Without further adieu:</p><figure class="kg-card kg-gallery-card kg-width-wide"><div class="kg-gallery-container"><div class="kg-gallery-row"><div class="kg-gallery-image"><img src="//wdziemia.github.io/content/images/2020/12/temre_main.png" width="721" height="1280" alt srcset="//wdziemia.github.io/content/images/size/w600/2020/12/temre_main.png 600w, //wdziemia.github.io/content/images/2020/12/temre_main.png 721w" sizes="(min-width: 720px) 720px"></div><div class="kg-gallery-image"><img src="//wdziemia.github.io/content/images/2020/12/temre_exercises-1.png" width="721" height="1280" alt srcset="//wdziemia.github.io/content/images/size/w600/2020/12/temre_exercises-1.png 600w, //wdziemia.github.io/content/images/2020/12/temre_exercises-1.png 721w" sizes="(min-width: 720px) 720px"></div><div class="kg-gallery-image"><img src="//wdziemia.github.io/content/images/2020/12/temre_exercise_detail-1.png" width="721" height="1280" alt srcset="//wdziemia.github.io/content/images/size/w600/2020/12/temre_exercise_detail-1.png 600w, //wdziemia.github.io/content/images/2020/12/temre_exercise_detail-1.png 721w" sizes="(min-width: 720px) 720px"></div></div></div></figure><p></p><p>I went with something as simple as possible and i think it looks very nice. The two things that stick out are <a href="https://www.blogger.com/u/1/blog/post/edit/575225956679068977/5483640293458952674#">chips</a> and SVG images. The chips are possible via my own version of <a href="https://www.blogger.com/u/1/blog/post/edit/575225956679068977/5483640293458952674#">chips-edittext-library</a> and SVG support is brought to you by <a href="https://www.blogger.com/u/1/blog/post/edit/575225956679068977/5483640293458952674#">svg-android</a>.</p><!--kg-card-begin: markdown--><p>I went with something as simple as possible and i think it looks very nice. The two things that stick out are chips and SVG images. The chips are possible via my own version of chips-edittext-library and SVG support is brought to you by svg-android<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>.</p>
<p>The reason for picking SVG images is because I could scale them, regardless of the screen density. SVGView[Name pending] will be created by myself as i dont know any open source components that can do this currently.</p>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>If your saving from illustrator, make sure you save as SVG Basic 1.1. Also, when creating your document, dont mess around with the art-boards after as it will mess with how the library reads the files. <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
<!--kg-card-end: markdown--><p>That its so far! I'll be going into detail with how each functions once I get done with them. I also plan on making this project available on GitHub once its released on the play store. Stay tuned and comments/feedback are greatly appreciated. I'd love any constructive criticism I can get.</p>]]></content:encoded></item><item><title><![CDATA[Concept: Facebook]]></title><description><![CDATA[<figure class="kg-card kg-image-card"><img src="//wdziemia.github.io/content/images/2020/12/tumblr_mdxip5mb2d1rlhttno1_r1_1280.png" class="kg-image" alt srcset="//wdziemia.github.io/content/images/size/w600/2020/12/tumblr_mdxip5mb2d1rlhttno1_r1_1280.png 600w, //wdziemia.github.io/content/images/size/w1000/2020/12/tumblr_mdxip5mb2d1rlhttno1_r1_1280.png 1000w, //wdziemia.github.io/content/images/2020/12/tumblr_mdxip5mb2d1rlhttno1_r1_1280.png 1280w" sizes="(min-width: 720px) 720px"></figure><p>The concept is more inline with the Facebook webpage than the Facebook app. The current Facebook app does not keep to the UX offered with the Facebook website. This idea is what puzzles me the most when creating a mobile application. When going from web to mobile, the user (already</p>]]></description><link>//wdziemia.github.io/facebook-concept/</link><guid isPermaLink="false">5fe254774e202b72753b0893</guid><category><![CDATA[Concept]]></category><dc:creator><![CDATA[Walter Dziemianczyk]]></dc:creator><pubDate>Thu, 28 Feb 2013 13:29:00 GMT</pubDate><content:encoded><![CDATA[<figure class="kg-card kg-image-card"><img src="//wdziemia.github.io/content/images/2020/12/tumblr_mdxip5mb2d1rlhttno1_r1_1280.png" class="kg-image" alt srcset="//wdziemia.github.io/content/images/size/w600/2020/12/tumblr_mdxip5mb2d1rlhttno1_r1_1280.png 600w, //wdziemia.github.io/content/images/size/w1000/2020/12/tumblr_mdxip5mb2d1rlhttno1_r1_1280.png 1000w, //wdziemia.github.io/content/images/2020/12/tumblr_mdxip5mb2d1rlhttno1_r1_1280.png 1280w" sizes="(min-width: 720px) 720px"></figure><p>The concept is more inline with the Facebook webpage than the Facebook app. The current Facebook app does not keep to the UX offered with the Facebook website. This idea is what puzzles me the most when creating a mobile application. When going from web to mobile, the user (already familiar with the webpage) shouldn't be greeted with an entirely new experience. Some familiarity should be help which lacks with Facebook's current approach.</p>]]></content:encoded></item><item><title><![CDATA[Welcome]]></title><description><![CDATA[<p>This Blog will be about Android stuff, enjoy the Android stuff!</p>]]></description><link>//wdziemia.github.io/welcome/</link><guid isPermaLink="false">5fe24f284e202b72753b0801</guid><dc:creator><![CDATA[Walter Dziemianczyk]]></dc:creator><pubDate>Sat, 16 Jun 2012 14:59:00 GMT</pubDate><content:encoded><![CDATA[<p>This Blog will be about Android stuff, enjoy the Android stuff!</p>]]></content:encoded></item></channel></rss>